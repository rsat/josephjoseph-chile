---
import { products } from '../data/products';

const categories = [...new Set(products.map(p => p.category))];
---

<aside class="filters">
	<div class="filters-header">
		<h3>Filtrar Productos</h3>
		<button id="clear-filters" class="clear-btn">Limpiar</button>
	</div>

	<div class="filter-group">
		<h4>Categoría</h4>
		<div class="filter-options">
			{categories.map((cat) => (
				<label class="filter-option">
					<input type="checkbox" name="category" value={cat} />
					<span>{cat}</span>
				</label>
			))}
		</div>
	</div>

	<div class="filter-group">
		<h4>Estado</h4>
		<div class="filter-options">
			<label class="filter-option">
				<input type="checkbox" name="status" value="new" />
				<span>Nuevos</span>
			</label>
		</div>
	</div>

	<div class="filter-group">
		<h4>Ordenar por</h4>
		<select id="sort-select" class="sort-select">
			<option value="default">Predeterminado</option>
			<option value="name-asc">Nombre (A-Z)</option>
			<option value="name-desc">Nombre (Z-A)</option>
		</select>
	</div>
</aside>

<script>
	const checkboxes = document.querySelectorAll('input[type="checkbox"]');
	const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
	const clearBtn = document.getElementById('clear-filters');
	const productCards = document.querySelectorAll('.product-card');

	function applyFilters() {
		const selectedCategories = Array.from(
			document.querySelectorAll('input[name="category"]:checked')
		).map((input: any) => input.value);

		const showNew = (document.querySelector('input[name="status"][value="new"]') as HTMLInputElement)?.checked;
		const sortValue = sortSelect?.value || 'default';

		// Filtrar productos
		const visibleProducts: HTMLElement[] = [];

		productCards.forEach((card) => {
			const cardElement = card as HTMLElement;
			const productName = card.querySelector('h3')?.textContent || '';
			const productDesc = card.querySelector('p')?.textContent || '';

			// Determinar categoría del producto
			let productCategory = '';
			selectedCategories.forEach(cat => {
				if (productDesc.toLowerCase().includes(cat.toLowerCase()) ||
				    window.location.pathname.includes(cat.toLowerCase().replace(/\s+/g, '-'))) {
					productCategory = cat;
				}
			});

			// Aplicar filtros
			let show = true;

			if (selectedCategories.length > 0 && !selectedCategories.includes(productCategory)) {
				show = false;
			}

			if (show) {
				cardElement.style.display = 'flex';
				visibleProducts.push(cardElement);
			} else {
				cardElement.style.display = 'none';
			}
		});

		// Ordenar productos visibles
		if (sortValue !== 'default' && visibleProducts.length > 0) {
			const container = visibleProducts[0].parentElement;
			if (container) {
				visibleProducts.sort((a, b) => {
					const nameA = a.querySelector('h3')?.textContent || '';
					const nameB = b.querySelector('h3')?.textContent || '';

					if (sortValue === 'name-asc') {
						return nameA.localeCompare(nameB);
					} else if (sortValue === 'name-desc') {
						return nameB.localeCompare(nameA);
					}
					return 0;
				});

				visibleProducts.forEach(product => container.appendChild(product));
			}
		}
	}

	checkboxes.forEach((checkbox) => {
		checkbox.addEventListener('change', applyFilters);
	});

	sortSelect?.addEventListener('change', applyFilters);

	clearBtn?.addEventListener('click', () => {
		checkboxes.forEach((checkbox: any) => {
			checkbox.checked = false;
		});
		if (sortSelect) sortSelect.value = 'default';
		applyFilters();
	});
</script>

<style>
	.filters {
		background: white;
		border: 1px solid var(--color-gray);
		border-radius: 8px;
		padding: 1.5rem;
		position: sticky;
		top: 160px;
	}

	.filters-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1.5rem;
		padding-bottom: 1rem;
		border-bottom: 1px solid var(--color-gray);
	}

	.filters-header h3 {
		font-size: 1.125rem;
		font-weight: 600;
		color: var(--color-dark);
		margin: 0;
	}

	.clear-btn {
		background: none;
		border: none;
		color: var(--color-text-light);
		font-size: 0.875rem;
		cursor: pointer;
		transition: color 0.3s ease;
		padding: 0;
		font-family: inherit;
	}

	.clear-btn:hover {
		color: var(--color-dark);
	}

	.filter-group {
		margin-bottom: 1.5rem;
	}

	.filter-group:last-child {
		margin-bottom: 0;
	}

	.filter-group h4 {
		font-size: 0.9375rem;
		font-weight: 600;
		color: var(--color-dark);
		margin-bottom: 0.75rem;
	}

	.filter-options {
		display: flex;
		flex-direction: column;
		gap: 0.625rem;
	}

	.filter-option {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		cursor: pointer;
		font-size: 0.9375rem;
		color: var(--color-text);
	}

	.filter-option input[type="checkbox"] {
		cursor: pointer;
		width: 16px;
		height: 16px;
	}

	.filter-option:hover span {
		color: var(--color-dark);
	}

	.sort-select {
		width: 100%;
		padding: 0.625rem;
		border: 1px solid var(--color-gray);
		border-radius: 4px;
		font-size: 0.9375rem;
		font-family: inherit;
		cursor: pointer;
		transition: border-color 0.3s ease;
	}

	.sort-select:focus {
		outline: none;
		border-color: var(--color-dark);
	}

	@media (max-width: 968px) {
		.filters {
			position: static;
			margin-bottom: 2rem;
		}
	}
</style>
